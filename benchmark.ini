;[GRAPHS]
;
;# Number of disconnected DAGs
;# Non-negative integer or String representing a random number function call
;DisconnectedDAGs = 5
;
;# Number of root vertices per DAG
;# Non-negative integer or String representing a random number function call
;RootsPerDAG = expovariate(1)
;
;# In a DAG, ratio between a layer of vertices and the next one
;# Float or String representing a random number function call
;VertexRatio = 2
;
;# Incoming edges per vertex
;# Non-negative integer or String representing a random number function call.
;EdgesPerVertex = 2
;
;# Longest path in a DAG.
;# Non-negative integer or String representing a random number function call.
;LongestPath = 50
;
;# Max number of previous layers from which a vertex can receive edges.
;# Non-negative integer or String representing a random number function call
;LayersPerVertex = 50
;
;# How the output edges are distributed between the vertices of a layer.
;# String representing a random number function call, or "deterministic" for a deterministic and uniform approach.
;EdgeDistribution = deterministic
;
;[SO]
;
;# Number of channels per stream
;# Non-negative integer or String representing a random number function call
;ChannelsPerStream = random.uniform(1, 5)
;
;# Number of SOs per DAG
;# Non-negative integer or String representing a random number function call
;StreamsPerSO = 10
;
;# How the streams are distributed in the SOs
;# String representing a random number function call, or "deterministic" for a deterministic and uniform approach.
;StreamsPerSO = deterministic
;
;# Time in milliseconds for the evaluation of the "current-value" javascript
;# Non-negative integer or String representing a random number function call
;CurrentValueMillis
[TOPOLOGIES]

# Number of disconnected SO topologies
# Non-negative integer or String representing a random number function call
Topologies = 5

# Number of SOs in a disconnected topology
# Non-negative integer or String representing a random number function call
SOs = 10

# Number of simple streams in the initial SO of each disconnected topology
# Non-negative integer or String representing a random number function call
InitialStreams = 5

# Number of simple streams per SO
# Non-negative integer or String representing a random number function call
Streams = 2

# Number of composite streams per SO
# Non-negative integer or String representing a random number function call
CompositeStreams = 10

# Number of channels per stream
# Non-negative integer or String representing a random number function call
Channels = 10

# Number of groups per SO
# Non-negative integer or String representing a random number function call
Groups = 10

# Number of group members
# Non-negative integer or String representing a random number function call
;Members = 5

# Number of groups used in each channel
# Non-negative integer or String representing a random number function call
GroupOperands = 2

# Number of Stream references used in each channel
# Non-negative integer or String representing a random number function call
StreamOperands = 1

# How the streams are distributed as members in the groups
# String representing a random number function call, or "deterministic" for a deterministic and uniform approach.
MemberDistribution = deterministic

# How the groups are distributed in the channels
# String representing a random number function call, or "deterministic" for a deterministic and uniform approach.
GroupDistribution = deterministic

# How the references to streams of the same SO are distributed in the channels
# String representing a random number function call, or "deterministic" for a deterministic and uniform approach.
StreamRefsDistribution = deterministic

# Milliseconds added to the time of evaluation of the current-value
# Non-negative integer or String representing a random number function call
CurrentValueMS = 1000

# Milliseconds added to the time of evaluation of the pre-filter
# Non-negative integer or String representing a random number function call
PreFilterMS = 1000

# Milliseconds added to the time of evaluation of the post-filter
# Non-negative integer or String representing a random number function call
PostFilterMS = 1000

# Defines de probability of the pre-filter to result true. The probability will be 1 divided by this value.
# Non-negative integer or String representing a random number function call
PreFilterProb = 10

# Defines de probability of the post-filter to result true. The probability will be 1 divided by this value.
# Non-negative integer or String representing a random number function call
PostFilterProb = 10

[API]

BaseAddress = http://minerva.bsc.es:8011/
AuthToken = MWRiODFmZjAtMWQyYS00MDQ0LTg1ZDQtZGE2NzVkMGYwNDYzOGM2YjE1NTUtZmNjNi00MGYyLWI4NTEtNzdiMjQxMDZhZWEz


